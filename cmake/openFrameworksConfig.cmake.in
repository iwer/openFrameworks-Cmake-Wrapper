get_filename_component(openFrameworks_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include(CMakeFindDependencyMacro)

list(APPEND CMAKE_MODULE_PATH ${openFrameworks_CMAKE_DIR})

# NOTE Had to use find_package because find_dependency does not support COMPONENTS or MODULE until 3.8.0

#find_dependency(Boost 1.55 REQUIRED COMPONENTS regex)
#find_dependency(openFrameworks 0.10 REQUIRED MODULE)
set(OpenGL_GL_PREFERENCE GLVND)
find_package(OpenGL REQUIRED)
find_package(GLUT REQUIRED)
find_package(X11 REQUIRED COMPONENTS X11 Xrandr Xxf86vm Xi Xcursor Xinerama)
find_package(Threads REQUIRED)
find_package(FreeImage REQUIRED)
# find_package(stdc++fs REQUIRED) for c++17 std::filesystem
find_package(Boost REQUIRED COMPONENTS system filesystem)
find_package(PugiXML REQUIRED)
find_package(assimp)
find_package(OpenCL)

include(FindPkgConfig)
pkg_search_module(Cairo REQUIRED cairo)
pkg_search_module(ZLIB REQUIRED zlib)
pkg_search_module(GST REQUIRED gstreamer-1.0)
pkg_search_module(GSTAPP REQUIRED gstreamer-app-1.0)
pkg_search_module(GSTVID REQUIRED gstreamer-video-1.0)
pkg_search_module(GSTBASE REQUIRED gstreamer-base-1.0)
pkg_search_module(UDEV REQUIRED libudev)
pkg_search_module(FreeType2 REQUIRED freetype2)
pkg_search_module(FontConfig REQUIRED fontconfig)
pkg_search_module(Sndfile REQUIRED sndfile)
pkg_search_module(OpenAL REQUIRED openal)
pkg_search_module(Curl REQUIRED libcurl)
pkg_search_module(GLFW3 REQUIRED glfw3)
pkg_search_module(RtAudio REQUIRED rtaudio)
pkg_search_module(Pulse REQUIRED libpulse-simple)
pkg_search_module(ALSA REQUIRED alsa)
pkg_search_module(GL REQUIRED gl)
pkg_search_module(GLu REQUIRED glu)
pkg_search_module(GLEW REQUIRED glew)
pkg_search_module(GTK REQUIRED gtk+-3.0)
pkg_search_module(MPG123 REQUIRED libmpg123)
pkg_search_module(GTK REQUIRED gstreamer-gl-1.0)
pkg_search_module(URI REQUIRED liburiparser)
pkg_search_module(USB libusb-1.0)
pkg_search_module(OPENCV opencv)
pkg_search_module(HARFBUZZ harfbuzz)

#list(REMOVE_AT CMAKE_MODULE_PATH -1)

if(NOT TARGET OF::openFrameworks)
    include("${openFrameworks_CMAKE_DIR}/openFrameworksTargets.cmake")
endif()
set(openFrameworks_LIBRARIES OF::openFrameworks OF::ofAddons)
